// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum EstadoPedido {
  PENDIENTE
  ENTREGADO
  CANCELADO
}

enum EstadoMesa {
  OCUPADA
  LIBRE
  RESERVADA
}

enum TipoComprobante {
  BOLETA
  FACTURA
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  username     String
  password     String
  role         Role    @default(USER)
  refreshToken String? @unique

  empleadoId Int?      @unique
  empleado   Empleado? @relation(fields: [empleadoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  lastLogin DateTime @default(now()) @map("last_login")
}

model Persona {
  id        Int       @id @default(autoincrement())
  nombre    String    @db.VarChar(10)
  apellido  String    @db.VarChar(15)
  telefono  String?   @db.VarChar(12)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  cliente  Cliente?
  empleado Empleado?
}

model Cliente {
  id     Int    @id @default(autoincrement())
  correo String @db.VarChar(25)

  personaId Int @unique

  persona Persona  @relation(fields: [personaId], references: [id], onDelete: Cascade)
  pedidos Pedido[]
}

model Empleado {
  id      Int   @id @default(autoincrement())
  salario Float

  rolId     Int
  personaId Int @unique

  persona Persona          @relation(fields: [personaId], references: [id], onDelete: Cascade)
  rol     Rol              @relation(fields: [rolId], references: [id])
  pedidos PedidoEmpleado[]
  User    User?
}

model Rol {
  id     Int    @id @default(autoincrement())
  nombre String @db.VarChar(25)

  empleados Empleado[]
}

model Mesa {
  id        Int        @id @default(autoincrement())
  numero    String     @db.VarChar(2)
  capacidad String     @db.VarChar(2)
  piso      Int
  estado    EstadoMesa @default(LIBRE)

  pedidos Pedido[]
}

model Pedido {
  id         Int          @id @default(autoincrement())
  estado     EstadoPedido @default(PENDIENTE)
  comentario String?      @db.VarChar(250)
  mesaId     Int
  clienteId  Int?
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime?    @map("updated_at")

  mesa        Mesa             @relation(fields: [mesaId], references: [id])
  cliente     Cliente?         @relation(fields: [clienteId], references: [id])
  empleados   PedidoEmpleado[]
  productos   PedidoProducto[]
  comprobante Comprobante?
}

model PedidoEmpleado {
  id         Int @id @default(autoincrement())
  pedidoId   Int
  empleadoId Int

  pedido   Pedido   @relation(fields: [pedidoId], references: [id])
  empleado Empleado @relation(fields: [empleadoId], references: [id])
}

model PedidoProducto {
  id         Int   @id @default(autoincrement())
  pedidoId   Int
  productoId Int
  cantidad   Int
  precioUnit Float

  pedido   Pedido   @relation(fields: [pedidoId], references: [id])
  producto Producto @relation(fields: [productoId], references: [id])
}

model Producto {
  id             Int     @id @default(autoincrement())
  nombre         String  @db.VarChar(20)
  descripcion    String  @db.VarChar(250)
  precio         Float
  habilitado     Boolean @default(true)
  disponible     Boolean @default(true)
  tipoProductoId Int

  tipoProducto TipoProducto     @relation(fields: [tipoProductoId], references: [id])
  pedidos      PedidoProducto[]
}

model TipoProducto {
  id     Int    @id @default(autoincrement())
  nombre String @db.VarChar(20)

  productos Producto[]
}

model Comprobante {
  id              Int             @id @default(autoincrement())
  tipoComprobante TipoComprobante @default(BOLETA)
  empresaId       Int
  tipoPagoId      Int
  pedidoId        Int             @unique
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime?       @map("updated_at")

  empresa  Empresa  @relation(fields: [empresaId], references: [id])
  tipoPago TipoPago @relation(fields: [tipoPagoId], references: [id])
  pedido   Pedido   @relation(fields: [pedidoId], references: [id])
}

model Empresa {
  id          Int     @id @default(autoincrement())
  RUC         String  @db.Char(11)
  razonSocial String  @db.VarChar(25)
  direccion   String? @db.VarChar(50)

  comprobantes Comprobante[]
}

model TipoPago {
  id     Int    @id @default(autoincrement())
  nombre String @db.VarChar(20)

  comprobantes Comprobante[]
}
